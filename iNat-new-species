<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>iNaturalist Observations</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            cursor: pointer;
            background-color: #f2f2f2;
        }
        th.sorted-asc::after {
            content: " ▲";
        }
        th.sorted-desc::after {
            content: " ▼";
        }
        .italic {
            font-style: italic;
        }
        #api-logs {
            max-height: 150px;
            overflow-y: auto;
            background: #f9f9f9;
            border: 1px solid #ddd;
            padding: 10px;
            margin-top: 20px;
        }
        #loading-status {
            color: red;
            font-weight: bold;
            display: none;
        }
        img {
            width: 50px;
            height: 50px;
        }
    </style>
</head>
<body>
    <h1>iNaturalist Observations</h1>
    <label>
        Quality Filter:
        <select id="quality-filter">
            <option value="verifiable=true">Verifiable</option>
            <option value="quality_grade=research">Research Grade</option>
        </select>
    </label>

    <label>
        Taxonomic Rank:
        <select id="taxonomic-rank">
            <option value="genus">Genus</option>
            <option value="species">Species</option>
        </select>
    </label>

    <label>
        Start Date:
        <input type="date" id="start-date">
    </label>
    <label>
        End Date:
        <input type="date" id="end-date">
    </label>

    <fieldset>
        <legend>Iconic Taxa Filter:</legend>
        <label><input type="checkbox" value="Actinopterygii"> Actinopterygii</label>
        <label><input type="checkbox" value="Animalia"> Animalia</label>
        <label><input type="checkbox" value="Amphibia"> Amphibia</label>
        <label><input type="checkbox" value="Arachnida"> Arachnida</label>
        <label><input type="checkbox" value="Aves"> Aves</label>
        <label><input type="checkbox" value="Chromista"> Chromista</label>
        <label><input type="checkbox" value="Fungi"> Fungi</label>
        <label><input type="checkbox" value="Insecta"> Insecta</label>
        <label><input type="checkbox" value="Mammalia"> Mammalia</label>
        <label><input type="checkbox" value="Mollusca"> Mollusca</label>
        <label><input type="checkbox" value="Reptilia"> Reptilia</label>
        <label><input type="checkbox" value="Plantae"> Plantae</label>
        <label><input type="checkbox" value="Protozoa"> Protozoa</label>
        <label><input type="checkbox" value="unknown"> Unknown</label>
    </fieldset>

    <button id="run-query">Run Query</button>
    <p id="loading-status">Loading data, please wait...</p>
    <p id="total-results"></p>
    <table>
        <thead>
            <tr>
                <th class="sortable" data-column="0">Taxon Name</th>
                <th class="sortable" data-column="1">Taxon ID</th>
                <th class="sortable" data-column="2">Iconic Taxon Name</th>
                <th class="sortable" data-column="3">Observation Count</th>
                <th class="sortable" data-column="4">Total</th>
                <th class="sortable" data-column="5">Ratio (%)</th>
                <th class="sortable" data-column="6">Photo</th>
            </tr>
        </thead>
        <tbody id="data-table"></tbody>
    </table>

    <h3>API Calls</h3>
    <div id="api-logs"></div>

    <script>
        const apiLogDiv = document.getElementById('api-logs');
        let currentSortColumn = null;
        let sortAscending = true;

        function logApiCall(url) {
            const logEntry = document.createElement('div');
            logEntry.textContent = url;
            apiLogDiv.appendChild(logEntry);
        }

        function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        function sortTable(columnIndex) {
            const rows = Array.from(document.getElementById('data-table').rows);

            rows.sort((a, b) => {
                const cellA = a.cells[columnIndex].textContent;
                const cellB = b.cells[columnIndex].textContent;

                const valueA = isNaN(cellA) ? cellA : parseFloat(cellA);
                const valueB = isNaN(cellB) ? cellB : parseFloat(cellB);

                if (valueA < valueB) return sortAscending ? -1 : 1;
                if (valueA > valueB) return sortAscending ? 1 : -1;
                return 0;
            });

            rows.forEach(row => document.getElementById('data-table').appendChild(row));
        }

        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', () => {
                const columnIndex = parseInt(header.dataset.column, 10);

                if (currentSortColumn === columnIndex) {
                    sortAscending = !sortAscending;
                } else {
                    currentSortColumn = columnIndex;
                    sortAscending = true;
                }

                document.querySelectorAll('th').forEach(th => th.classList.remove('sorted-asc', 'sorted-desc'));
                header.classList.add(sortAscending ? 'sorted-asc' : 'sorted-desc');

                sortTable(columnIndex);
            });
        });

        document.getElementById('run-query').addEventListener('click', async () => {
            const qualityFilter = document.getElementById('quality-filter').value;
            const taxonomicRank = document.getElementById('taxonomic-rank').value;
            const startDate = document.getElementById('start-date').value;
            const endDate = document.getElementById('end-date').value;
            const iconicTaxa = Array.from(document.querySelectorAll('fieldset input:checked'))
                .map(input => input.value)
                .join(',');

            let apiUrl = `https://api.inaturalist.org/v2/observations/species_counts?place_id=120582&fields=taxon.id,taxon.name,taxon.iconic_taxon_name,taxon.default_photo.square_url,count&${qualityFilter}&hrank=${taxonomicRank}`;
            if (startDate) apiUrl += `&d1=${startDate}`;
            if (endDate) apiUrl += `&d2=${endDate}`;
            if (iconicTaxa) apiUrl += `&iconic_taxa=${iconicTaxa}`;

            document.getElementById('loading-status').style.display = 'block';
            document.getElementById('total-results').textContent = '';
            document.getElementById('data-table').innerHTML = '';
            apiLogDiv.innerHTML = '';

            await fetchDataWithPagination(apiUrl, startDate, endDate, qualityFilter);
        });

        async function fetchDataWithPagination(apiUrl, startDate, endDate, qualityFilter) {
            let allResults = [];
            let currentPage = 1;

            while (true) {
                const paginatedUrl = `${apiUrl}&page=${currentPage}`;
                logApiCall(paginatedUrl);

                try {
                    const response = await fetch(paginatedUrl);
                    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
                    const data = await response.json();

                    allResults = allResults.concat(data.results);
                    if (data.results.length === 0 || allResults.length >= data.total_results) break;

                    currentPage++;
                    await delay(1000);
                } catch (error) {
                    console.error('Error during pagination:', error);
                    break;
                }
            }

            if (allResults.length > 0) {
                document.getElementById('total-results').textContent = `Total species detected: ${allResults.length}`;
                populateTable(allResults, startDate, endDate, qualityFilter);
                await fetchAdditionalData(allResults.map(item => item.taxon.id));
            }

            document.getElementById('loading-status').style.display = 'none';
        }

        async function fetchAdditionalData(taxonIds) {
            const batchSize = 50;
            const batches = [];

            for (let i = 0; i < taxonIds.length; i += batchSize) {
                const batch = taxonIds.slice(i, i + batchSize).join(',');
                batches.push(batch);
            }

            for (const batch of batches) {
                const url = `https://api.inaturalist.org/v2/observations/species_counts?place_id=120582&taxon_ids=${batch}`;
                logApiCall(url);

                try {
                    const response = await fetch(url);
                    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
                    const data = await response.json();

                    updateTableWithAdditionalData(data.results);
                    await delay(1000);
                } catch (error) {
                    console.error('Error fetching additional data:', error);
                }
            }
        }

        function updateTableWithAdditionalData(data) {
    const rows = Array.from(document.getElementById('data-table').rows);

    data.forEach(item => {
        const row = rows.find(r => r.cells[1].textContent === String(item.taxon.id));
        if (row) {
            row.cells[4].textContent = item.count;
            const inverseRatio = ((row.cells[3].textContent / item.count) * 100).toFixed(2);
            row.cells[5].textContent = inverseRatio;
        }
    });
}


        function populateTable(data, startDate, endDate, qualityFilter) {
            const tableBody = document.getElementById('data-table');

            data.forEach(item => {
                const row = document.createElement('tr');

                // Taxon Name
                const nameCell = document.createElement('td');
                nameCell.className = 'italic';
                nameCell.textContent = item.taxon.name || 'N/A';
                row.appendChild(nameCell);

                // Taxon ID
                const idCell = document.createElement('td');
                const idLink = document.createElement('a');
                idLink.href = `https://inaturalist.lu/taxa/${item.taxon.id}`;
                idLink.target = '_blank';
                idLink.textContent = item.taxon.id;
                idCell.appendChild(idLink);
                row.appendChild(idCell);

                // Iconic Taxon Name
                const iconicTaxonCell = document.createElement('td');
                iconicTaxonCell.textContent = item.taxon.iconic_taxon_name || 'N/A';
                row.appendChild(iconicTaxonCell);

                // Observation Count
                const observationCountCell = document.createElement('td');
                const obsCountLink = document.createElement('a');
                let obsCountUrl = `https://inaturalist.lu/observations?place_id=120582&taxon_id=${item.taxon.id}&${qualityFilter}`;
                if (startDate) obsCountUrl += `&d1=${startDate}`;
                if (endDate) obsCountUrl += `&d2=${endDate}`;
                obsCountLink.href = obsCountUrl;
                obsCountLink.target = '_blank';
                obsCountLink.textContent = item.count || 'N/A';
                observationCountCell.appendChild(obsCountLink);
                row.appendChild(observationCountCell);

                // Total Count
                const totalCell = document.createElement('td');
                totalCell.textContent = 'Loading...';
                row.appendChild(totalCell);

                // Ratio
                const ratioCell = document.createElement('td');
                ratioCell.textContent = 'Loading...';
                row.appendChild(ratioCell);

                // Photo
                const photoCell = document.createElement('td');
                const squareUrl = item.taxon.default_photo?.square_url || 'N/A';
                if (squareUrl !== 'N/A') {
                    const img = document.createElement('img');
                    img.src = squareUrl;
                    img.alt = item.taxon.name || 'Photo';
                    img.style.width = '50px'; // Adjust size as needed
                    img.style.height = '50px';
                    photoCell.appendChild(img);
                } else {
                    photoCell.textContent = 'N/A';
                }
                row.appendChild(photoCell);

                tableBody.appendChild(row);
            });

            // Default sort by ratio, descending
            currentSortColumn = 5;
            sortAscending = false;
            sortTable(5);
        }
    </script>
</body>
</html>
