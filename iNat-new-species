<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Species Count</title>
    <style>
        .italic {
            font-style: italic;
        }
        #loading-status {
            display: none;
            font-size: 1.2em;
            color: #888;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        table, th, td {
            border: 1px solid black;
        }
        th, td {
            padding: 8px;
            text-align: left;
        }
        #api-log {
            margin-top: 20px;
            padding: 10px;
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            font-size: 0.9em;
            max-height: 200px;
            overflow-y: auto;
        }
    </style>
</head>
<body>

    <h1>Species Count Data</h1>

    <div>
        <label for="filter">Select Filter:</label>
        <select id="filter">
            <option value="verifiable=true">Verifiable</option>
            <option value="quality_grade=research">Quality Grade: Research</option>
        </select>
        
        <label for="rank">Select Rank:</label>
        <select id="rank">
            <option value="genus">Genus</option>
            <option value="species">Species</option>
        </select>
        
        <br>

        <label for="start-date">Start Date:</label>
        <input type="date" id="start-date">
        
        <label for="end-date">End Date:</label>
        <input type="date" id="end-date">
        
        <button id="run-query">Run Query</button>
    </div>

    <div id="loading-status">Loading data...</div>

    <div id="total-results">Total species detected: 0</div>

    <table>
        <thead>
            <tr>
                <th>Taxon Name</th>
                <th>Taxon ID</th>
                <th>Iconic Taxon Name</th>
                <th>Observation Count</th>
                <th>Total</th>
                <th>Ratio</th>
            </tr>
        </thead>
        <tbody id="data-table">
        </tbody>
    </table>

    <div id="api-log">
        <h3>API Calls:</h3>
        <ul id="api-log-list"></ul>
    </div>

    <script>
        function formatDateForApi(dateStr) {
            if (!dateStr) return "";
            return new Date(dateStr).toISOString().split('T')[0];
        }

        document.getElementById('run-query').addEventListener('click', () => {
            // Clear previous table data
            const tableBody = document.getElementById('data-table');
            tableBody.innerHTML = ''; // This clears the existing table rows

            // Reset the total species count and API log
            document.getElementById('total-results').textContent = "Total species detected: 0";
            document.getElementById('api-log-list').innerHTML = '';

            const filter = document.getElementById('filter').value;
            const hrank = document.getElementById('rank').value;

            const d1Raw = document.getElementById('start-date').value;
            const d2Raw = document.getElementById('end-date').value;

            const d1 = formatDateForApi(d1Raw);
            const d2 = formatDateForApi(d2Raw);

            let apiUrl = `https://api.inaturalist.org/v2/observations/species_counts?${filter}&hrank=${hrank}&place_id=120582&per_page=500&fields=taxon.iconic_taxon_name,taxon.id,taxon.name,count`;
            if (d1) apiUrl += `&d1=${d1}`;
            if (d2) apiUrl += `&d2=${d2}`;

            document.getElementById('loading-status').style.display = 'block';

            fetchDataWithPagination(apiUrl);
        });

        function fetchDataWithPagination(apiUrl) {
            let page = 1;
            let totalResults = 0;
            let taxonIds = [];

            function fetchPage() {
                const url = apiUrl + `&page=${page}`;
                logApiCall(url);

                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        if (page === 1) {
                            totalResults = data.total_results || 0;
                            document.getElementById('total-results').textContent = `Total species detected: ${totalResults}`;
                        }

                        if (data.results) {
                            data.results.forEach(item => {
                                taxonIds.push(item.taxon.id);
                                addRowToTable(item);
                            });
                        }

                        if (page * 500 < totalResults) {
                            page++;
                            setTimeout(fetchPage, 1000);
                        } else {
                            fetchCountsInBatches(taxonIds, document.getElementById('filter').value);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching the data:', error);
                        document.getElementById('total-results').textContent = "Error loading data";
                        handleRetry(error, fetchPage);
                    });
            }

            fetchPage();
        }

        function handleRetry(error, fetchPageFunc) {
            const MAX_RETRIES = 5;
            let retries = 0;

            function tryAgain() {
                if (retries < MAX_RETRIES) {
                    retries++;
                    const delay = Math.pow(2, retries) * 1000;
                    console.log(`Retrying in ${delay / 1000}s...`);
                    setTimeout(fetchPageFunc, delay);
                } else {
                    console.log('Max retries reached. Giving up.');
                    document.getElementById('loading-status').style.display = 'none';
                }
            }

            if (error && error.status === 429) {
                tryAgain();
            } else {
                console.log('An error occurred:', error);
                document.getElementById('loading-status').style.display = 'none';
            }
        }

        function addRowToTable(item) {
            const tableBody = document.getElementById('data-table');
            
            let row = Array.from(tableBody.getElementsByTagName('tr')).find(row => row.dataset.taxonId === item.taxon.id.toString());

            if (!row) {
                row = document.createElement('tr');
                row.dataset.taxonId = item.taxon.id;

                const taxonNameCell = document.createElement('td');
                taxonNameCell.textContent = item.taxon.name || 'N/A';
                taxonNameCell.classList.add('italic');
                row.appendChild(taxonNameCell);

                const taxonIdCell = document.createElement('td');
                const taxonIdLink = document.createElement('a');
                taxonIdLink.href = `https://inaturalist.lu/taxa/${item.taxon.id}`;
                taxonIdLink.textContent = item.taxon.id;
                taxonIdLink.target = '_blank';
                taxonIdCell.appendChild(taxonIdLink);
                row.appendChild(taxonIdCell);

                const iconicTaxonCell = document.createElement('td');
                iconicTaxonCell.textContent = item.taxon.iconic_taxon_name || 'N/A';
                row.appendChild(iconicTaxonCell);

                const observationCountCell = document.createElement('td');
                const observationCountLink = document.createElement('a');
                observationCountLink.href = `https://inaturalist.lu/observations?d1=${formatDateForApi(document.getElementById('start-date').value)}&d2=${formatDateForApi(document.getElementById('end-date').value)}&place_id=120582&${document.getElementById('filter').value}&taxon_id=${item.taxon.id}`;
                observationCountLink.textContent = item.count || 'N/A';
                observationCountCell.appendChild(observationCountLink);
                row.appendChild(observationCountCell);

                row.appendChild(document.createElement('td')); // Total column (initially empty)
                row.appendChild(document.createElement('td')); // Ratio column (initially empty)

                tableBody.appendChild(row);
            }

            return row;
        }

        function logApiCall(url) {
            const logItem = document.createElement('li');
            logItem.textContent = url;
            document.getElementById('api-log-list').appendChild(logItem);
        }

        function fetchCountsInBatches(taxonIds, filter) {
            const batchSize = 50;
            let batchIndex = 0;

            function fetchBatch() {
                const batch = taxonIds.slice(batchIndex * batchSize, (batchIndex + 1) * batchSize);
                if (batch.length === 0) return;

                const url = `https://api.inaturalist.org/v2/observations/species_counts?${filter}&place_id=120582&taxon_id=${batch.join(',')}&fields=taxon.id,count`;

                logApiCall(url);

                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        data.results.forEach(countItem => {
                            const taxonId = countItem.taxon.id;
                            const count = countItem.count;

                            const row = Array.from(document.querySelectorAll('#data-table tr'))
                                .find(row => row.dataset.taxonId === taxonId.toString());

                            if (row) {
                                const totalCell = row.querySelector('td:nth-child(5)');
                                const ratioCell = row.querySelector('td:nth-child(6)');
                                totalCell.textContent = count || "N/A";

                                const observationCountCell = row.querySelector('td:nth-child(4) a');
                                const observationCount = observationCountCell ? parseInt(observationCountCell.textContent) : 0;
                                const ratio = observationCount && count ? ((observationCount / count) * 100).toFixed(2) : "N/A";
                                ratioCell.textContent = ratio;
                            }
                        });

                        batchIndex++;
                        if (batchIndex * batchSize < taxonIds.length) {
                            setTimeout(fetchBatch, 1000); // Add delay to avoid rate-limiting
                        } else {
                            document.getElementById('loading-status').style.display = 'none';
                        }
                    })
                    .catch(error => console.error('Error fetching counts:', error));
            }

            fetchBatch();
        }
    </script>

</body>
</html>
